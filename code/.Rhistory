#Set the working directory to the directory of the file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Library for cluster analysis
library(cluster)
data <- read.csv("..\data\merged_data_4.csv")
data <- read.csv("../data/merged_data_4.csv")
data
View(data)
View(data$English)
rownames(data) <- data$English
View(data)
View(data)
View(data)
data <- data[,c("Bislama", "Pijin", "Tok Pisin", "Torres Creole")]
data <- data[,c("Bislama", "Pijin", "Tok.Pisin", "Torres.Creole")]
View(data)
#Transpose the data
data.transposed <- data.frame(t(data))
View(data)
View(data.transposed)
colnames(data.transposed)
#Calculate the distances
distances <- daisy(data.transposed,
metric = "gower",
type = list(symm = c(1:ncol(data.transposed))))
library(stringdist)
distances <- stringdistmatrix(data.transposed, data.transposed, method = "lv")
distances
View(distances)
distances <- stringdistmatrix(data, data, method = "lv")
View(distances)
View(data)
View(data)
#Calculate the Levenshtein distance for all languages
distances <- stringdistmatrix(data, data, method = "lv", useNames = colnames(data))
View(distances)
#Load the data from the merged data file
data <- read.csv("../data/merged_data_4_clean.csv")
View(data)
#Set the rownames to be the English equivalents
rownames(data) <- data$English
View(data)
#Calculate the Levenshtein distance for all languages
distances <- stringdistmatrix(data, data, method = "lv", useNames = colnames(data))
View(distances)
View(data)
View(data)
View(data.transposed)
#Set the working directory to the directory of the file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Library for cluster analysis
library(cluster)
library(stringdist)
#Load the data from the merged data file
data <- read.csv("../data/merged_data_4_clean.csv")
View(data)
#Set the rownames to be the English equivalents
rownames(data) <- data$English
View(data)
#Remove English from the rows that are analyzed
#data <- data[,c("Bislama", "Pijin", "Tok.Pisin", "Torres.Creole")]
#View(data)
#Transpose the data
#data.transposed <- data.frame(t(data))
#View(data.transposed)
#colnames(data.transposed)
#Calculate the Levenshtein distance for all languages
distances <- stringdistmatrix(data, data, method = "lv", useNames = colnames(data))
#Calculate the Levenshtein distance for all languages
distances <- stringdistmatrix(data, data, method = "lv", useNames = colnames(data))
View(data)
View(data)
#Load the data from the merged data file
data <- read.csv("../data/merged_data_4_clean.csv")
View(data)
#Set the rownames to be the English equivalents
rownames(data) <- data$English
View(data)
#Remove English from the rows that are analyzed
data <- data[,c("Bislama", "Pijin", "Tok.Pisin", "Torres.Creole")]
View(data)
#Calculate the Levenshtein distance for all languages
distances <- stringdistmatrix(data, data, method = "lv", useNames = colnames(data))
View(distances)
#Calculate the Levenshtein distance for all languages
distances <- stringdistmatrix(data, data, method = "lv")
View(distances)
#Load the data from the merged data file
data <- read.csv("../data/merged_data_4_clean.csv")
View(data)
#Set the rownames to be the English equivalents
rownames(data) <- data$English
View(data)
#Calculate the Levenshtein distance for all languages
distances <- stringdistmatrix(data, data, method = "lv")
View(distances)
#Cluster the languages based on the distance matrix
cluster <- hclust(distances,method="complete")
View(distances)
View(distances)
#Calculate the Levenshtein distance for all languages
distances <- stringdistmatrix(data, data, method = "lv")
View(distances)
#Cluster the languages based on the distance matrix
distances -> as.dist(distances)
library(stats)
#Cluster the languages based on the distance matrix
distances -> as.dist(distances)
#Cluster the languages based on the distance matrix
distances <- as.dist(distances)
cluster <- hclust(distances,method="complete")
View(cluster)
plot(cluster)
#Calculate the Levenshtein distance for all languages
distances <- stringdistmatrix(data, data, method = "lv", usenames = c("test"))
#Calculate the Levenshtein distance for all languages
distances <- stringdistmatrix(data, data, method = "lv", usenames = c("test", "t", "t", "t", "t"))
#Calculate the Levenshtein distance for all languages
distances <- stringdistmatrix(data, data, method = "lv")
View(data)
View(data)
#Calculate the Levenshtein distance for all languages
distances <- stringdistmatrix(data, data, method = "lv")
rownames(distances) <- rownames(data)
View(data)
View(data)
rownames(distances) <- rownames(data[,2:6])
View(cluster)
View(cluster)
View(distances)
rownames(distances) <- names(data)
colnames(distances) <- names(data)
View(distances)
#Cluster the languages based on the distance matrix
distances <- as.dist(distances)
cluster <- hclust(distances,method="complete")
plot(cluster)
heatmap(as.matrix(distances),
Rowv = as.dendrogram(cluster),  # Row clustering
Colv = as.dendrogram(cluster),  # Column clustering
trace = "none",            # No trace lines inside the heatmap
dendrogram = "both",        # Add dendrograms to both axes
margins = c(10, 10),        # Margins for axis labels
labRow = data,    # Row labels (vocabulary)
labCol = data,    # Column labels (vocabulary)
main = "Heatmap of Levenshtein Distances with Clustering")
heatmap(as.matrix(distances),
Rowv = as.dendrogram(cluster),  # Row clustering
Colv = as.dendrogram(cluster),  # Column clustering
trace = "none",            # No trace lines inside the heatmap
dendrogram = "both",        # Add dendrograms to both axes
margins = c(10, 10),        # Margins for axis labels
labRow = names(data),    # Row labels (vocabulary)
labCol = data,    # Column labels (vocabulary)
main = "Heatmap of Levenshtein Distances with Clustering")
heatmap(as.matrix(distances),
Rowv = as.dendrogram(cluster),  # Row clustering
Colv = as.dendrogram(cluster),  # Column clustering
trace = "none",            # No trace lines inside the heatmap
dendrogram = "both",        # Add dendrograms to both axes
margins = c(10, 10),        # Margins for axis labels
labRow = names(data),    # Row labels (vocabulary)
labCol = names(data),    # Column labels (vocabulary)
main = "Heatmap of Levenshtein Distances with Clustering")
plot(cluster)
heatmap(as.matrix(distances),
Rowv = as.dendrogram(cluster),  # Row clustering
Colv = as.dendrogram(cluster),  # Column clustering
trace = "none",            # No trace lines inside the heatmap
dendrogram = "both",        # Add dendrograms to both axes
margins = c(10, 10),        # Margins for axis labels
labRow = names(data),    # Row labels (vocabulary)
labCol = names(data),    # Column labels (vocabulary)
main = "Heatmap of Levenshtein Distances with Clustering")
